;; some other faces
 ;; '(default ((t (:family "Noto Mono" :foundry "GOOG" :width normal :height 120 :weight normal :slant normal :underline nil :overline nil :strike-through nil :box nil :inverse-video nil :foreground "#655370" :background "#fbf8ef" :stipple nil :inherit nil))))
 ;; '(cursor ((t (:background "#100a14"))))
 ;; '(fixed-pitch ((t (:family "Monospace"))))
 ;; '(variable-pitch ((((type w32)) (:foundry "outline" :family "Arial")) (t (:family "Sans Serif"))))
 ;; '(escape-glyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
 ;; '(homoglyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
 ;; '(minibuffer-prompt ((t (:foreground "#3a81c3" :inherit (bold)))))
 ;; '(highlight ((t (:foreground "#655370" :background "#d3d3e7"))))
 ;; '(region ((t (:background "#d3d3e7"))))
 ;; '(shadow ((t (:foreground "#a094a2"))))
 ;; '(secondary-selection ((t (:background "#e3dedd"))))
 ;; '(trailing-whitespace ((t (:background "#e0211d"))))
 ;; '(font-lock-builtin-face ((t (:foreground "#3a81c3"))))
 ;; '(font-lock-comment-delimiter-face ((default (:inherit (font-lock-comment-face)))))
 ;; '(font-lock-comment-face ((t (:slant normal :foreground "#2aa1ae" :background "#ecf3ec"))))
 ;; '(font-lock-constant-face ((t (:foreground "#4e3163"))))
 ;; '(font-lock-doc-face ((t (:foreground "#da8b55" :inherit (font-lock-comment-face)))))
 ;; '(font-lock-function-name-face ((t (:foreground "#6c3163" :inherit (bold)))))
 ;; '(font-lock-keyword-face ((t (:slant normal :foreground "#3a81c3" :inherit (bold)))))
 ;; '(font-lock-negation-char-face ((t (:foreground "#4e3163" :inherit (bold)))))
 ;; '(font-lock-preprocessor-face ((t (:foreground "#6c3163" :inherit (bold)))))
 ;; '(font-lock-regexp-grouping-backslash ((t (:foreground "#51afef" :inherit (bold)))))
 ;; '(font-lock-regexp-grouping-construct ((t (:foreground "#51afef" :inherit (bold)))))
 ;; '(font-lock-string-face ((t (:foreground "#2d9574"))))
 ;; '(font-lock-type-face ((t (:foreground "#ba2f59" :inherit (bold)))))
 ;; '(font-lock-variable-name-face ((t (:foreground "#715ab1"))))
 ;; '(font-lock-warning-face ((t (:foreground "#dc752f" :background "#fbf8ef" :inherit (warning)))))
 ;; '(button ((t (:inherit (link)))))
 ;; '(link ((t (:weight bold :underline (:color foreground-color :style line) :foreground "#2aa1ae"))))
 ;; '(link-visited ((t (:underline (:color foreground-color :style line) :foreground "#6c4173"))))
 ;; '(fringe ((t (:foreground "#655370" :background "#fbf8ef" :inherit (default)))))
 ;; '(header-line ((t (:background "#d2ceda" :inherit (mode-line)))))
 ;; '(tooltip ((t (:weight normal :slant normal :underline nil :foreground "#655370" :background "#c8c6dd"))))
 ;; '(mode-line ((t (:box (:line-width 1 :color "#b3b9be" :style nil) :foreground "#655370" :background "#e7e5eb"))))
 ;; '(mode-line-buffer-id ((t (:weight bold :foreground "#6c3163" :inherit (bold)))))
 ;; '(mode-line-emphasis ((t (:foreground "#51afef"))))
 ;; '(mode-line-highlight ((t (:inherit (highlight)))))
 ;; '(mode-line-inactive ((t (:box (:line-width 1 :color "#b3b9be" :style nil) :foreground "#655370" :background "#fbf8ef"))))
 ;; '(isearch ((t (:weight bold :foreground "#fbf8ef" :background "#ba2f59"))))
 ;; '(isearch-fail ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) (:foreground "grey")) (t (:inverse-video t))))
 ;; '(lazy-highlight ((t (:weight normal :foreground "#DFDFDF" :background "#dae6d0"))))
 ;; '(match ((t (:weight bold :foreground "#ba2f59" :background "#d3d3e7"))))
 ;; '(next-error ((t (:inherit (region)))))
 ;; '(query-replace ((t (:inherit (isearch))))))

(defun has-true-color ()
  (or (display-graphic-p) (= (tty-display-color-cells) 16777216)))

(defun infinity-apply-theme (theme name)
  (let*
      ((class '((class color) (min-colors 89)))
       ;;                                                    ~~ Dark ~~                               ~~ Light ~~
       ;;                                                          GUI       TER                             GUI       TER
       ;; generic
       (primary-4     (if (eq theme 'dark) (if (has-true-color) "#1c48ad" "#268bd2") (if (has-true-color) "#92CAFE" "#268bd2")))
       (primary-3     (if (eq theme 'dark) (if (has-true-color) "#2067cc" "#268bd2") (if (has-true-color) "#91ccff" "#268bd2")))
       (primary-2     (if (eq theme 'dark) (if (has-true-color) "#2279de" "#268bd2") (if (has-true-color) "#65b8ff" "#268bd2")))
       (primary-1     (if (eq theme 'dark) (if (has-true-color) "#248bf2" "#268bd2") (if (has-true-color) "#42a8ff" "#268bd2")))
       (primary       (if (eq theme 'dark) (if (has-true-color) "#2499ff" "#268bd2") (if (has-true-color) "#2499ff" "#268bd2")))
       (primary+1     (if (eq theme 'dark) (if (has-true-color) "#42a8ff" "#268bd2") (if (has-true-color) "#248bf2" "#268bd2")))
       (primary+2     (if (eq theme 'dark) (if (has-true-color) "#65b8ff" "#268bd2") (if (has-true-color) "#2279de" "#268bd2")))
       (primary+3     (if (eq theme 'dark) (if (has-true-color) "#91ccff" "#268bd2") (if (has-true-color) "#2067cc" "#268bd2")))
       (primary+4     (if (eq theme 'dark) (if (has-true-color) "#bcdfff" "#268bd2") (if (has-true-color) "#1c48ad" "#268bd2")))

       ($a     "#ecedee")
       ($b     "#cccdce")
       ($c     "#D9D9D9")
       ($f     "#282828")
       ($fb    "#207DD9")
       ;; ($a     "#ABAFB3")
       ;; ($b     "#919599")
       ;; ($c     "#B7BCC1")
       ;; ($f     "#ffffff")
       ;; ($fb    "#207DD9")

       (mode-line-buffer-id-inactive     (if (eq theme 'dark) (if (has-true-color) "#248bf2" "#d75fd7") (if (has-true-color) $fb "#8700af")))
       (mode-line-buffer-id     (if (eq theme 'dark) (if (has-true-color) "#248bf2" "#d75fd7") (if (has-true-color) $fb "#8700af")))
       (mode-line-bg            (if (eq theme 'dark) (if (has-true-color) "#1C1D21" "#268bd2") (if (has-true-color) $a "#268bd2")))
       (mode-line-fg            (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#b2b2b2") (if (has-true-color) $f "#5f5f87")))
       (mode-line-bg-inactive   (if (eq theme 'dark) (if (has-true-color) "#1C1D21" "#268bd2") (if (has-true-color) $b "#268bd2")))
       (mode-line-fg-inactive   (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#b2b2b2") (if (has-true-color) $f "#5f5f87")))
       (mode-line-2-bg          (if (eq theme 'dark) (if (has-true-color) "#1c48ad" "#268bd2") (if (has-true-color) $b "#268bd2")))
       (mode-line-2-fg          (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#268bd2") (if (has-true-color) $f "#268bd2")))
       (mode-line-2-bg-inactive (if (eq theme 'dark) (if (has-true-color) "#344052" "#268bd2") (if (has-true-color) $b "#268bd2")))
       (mode-line-2-fg-inactive (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#b2b2b2") (if (has-true-color) $f "#5f5f87")))
       (mode-line-4-bg          (if (eq theme 'dark) (if (has-true-color) "#242C38" "#268bd2") (if (has-true-color) $c "#268bd2")))
       (mode-line-4-fg          (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#b2b2b2") (if (has-true-color) $f "#5f5f87")))
       (mode-line-4-bg-inactive (if (eq theme 'dark) (if (has-true-color) "#1C1D21" "#268bd2") (if (has-true-color) $b "#268bd2")))
       (mode-line-4-fg-inactive (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#b2b2b2") (if (has-true-color) $f "#5f5f87")))
       (secondary-4   (if (eq theme 'dark) (if (has-true-color) "#1C1D21" "#268bd2") (if (has-true-color) "#eeeeee" "#268bd2")))
       (secondary-41  (if (eq theme 'dark) (if (has-true-color) "#242C38" "#268bd2") (if (has-true-color) "#D8D8D8" "#268bd2")))
       ;; (secondary-4   (if (eq theme 'dark) (if (has-true-color) "#212121" "#268bd2") (if (has-true-color) "#eeeeee" "#268bd2")))
       ;; (secondary-3   (if (eq theme 'dark) (if (has-true-color) "#424242" "#268bd2") (if (has-true-color) "#d0d0d0" "#268bd2")))
       (secondary-3   (if (eq theme 'dark) (if (has-true-color) "#363a41" "#268bd2") (if (has-true-color) "#d0d0d0" "#268bd2")))
       (secondary-2   (if (eq theme 'dark) (if (has-true-color) "#565B66" "#268bd2") (if (has-true-color) "#bbbbbb" "#268bd2")))
       (secondary-1   (if (eq theme 'dark) (if (has-true-color) "#757575" "#268bd2") (if (has-true-color) "#aaaaaa" "#268bd2")))
       (secondary     (if (eq theme 'dark) (if (has-true-color) "#999999" "#268bd2") (if (has-true-color) "#999999" "#268bd2")))
       (secondary+1   (if (eq theme 'dark) (if (has-true-color) "#aaaaaa" "#268bd2") (if (has-true-color) "#757575" "#268bd2")))
       (secondary+2   (if (eq theme 'dark) (if (has-true-color) "#bbbbbb" "#268bd2") (if (has-true-color) "#616161" "#268bd2")))
       (secondary+3   (if (eq theme 'dark) (if (has-true-color) "#d0d0d0" "#268bd2") (if (has-true-color) "#424242" "#268bd2")))
       (secondary+4   (if (eq theme 'dark) (if (has-true-color) "#eeeeee" "#268bd2") (if (has-true-color) "#212121" "#268bd2")))

       (on-primary    (if (eq theme 'dark) (if (has-true-color) "#111111" "#5f5f87") (if (has-true-color) "#eeeeee" "#5f5f87")))
       (dark          (if (eq theme 'dark) (if (has-true-color) "#111111" "#b2b2b2") (if (has-true-color) "#111111" "#5f5f87")))
       (act1          (if (eq theme 'dark) (if (has-true-color) "#222226" "#121212") (if (has-true-color) "#e7e7e7" "#d7dfff")))
       (act2          (if (eq theme 'dark) (if (has-true-color) "#1c48ad" "#444444") (if (has-true-color) "#bcdfff" "#afafd7")))
       (base          (if (eq theme 'dark) (if (has-true-color) "#C0C5CC" "#b2b2b2") (if (has-true-color) "#282828" "#5f5f87")))
       (base-dim      (if (eq theme 'dark) (if (has-true-color) "#616A73" "#585858") (if (has-true-color) "#ABABAB" "#afafd7")))
       (base-dim2     (if (eq theme 'dark) (if (has-true-color) "#616A73" "#585858") (if (has-true-color) "#808080" "#afafd7")))
       (base-comment  (if (eq theme 'dark) (if (has-true-color) "#616A73" "#585858") (if (has-true-color) "#92B3B1" "#afafd7")))
       (bg1           (if (eq theme 'dark) (if (has-true-color) "#282c34" "#262626") (if (has-true-color) "#ffffff" "#ffffff")))
       ;; (bg1           (if (eq theme 'dark) (if (has-true-color) "#2B2C30" "#262626") (if (has-true-color) "#f4f4f4" "#ffffff")))
       (bg11          (if (eq theme 'dark) (if (has-true-color) "#31343D" "#262626") (if (has-true-color) "#B4C9DD" "#ffffff")))
       (bg12          (if (eq theme 'dark) (if (has-true-color) "#34373D" "#262626") (if (has-true-color) "#EDEDED" "#ffffff")))
       (bg12b         (if (eq theme 'dark) (if (has-true-color) "#2D3848" "#262626") (if (has-true-color) "#D6E7F0" "#ffffff")))
       (bg13          (if (eq theme 'dark) (if (has-true-color) "#1B1C1F" "#262626") (if (has-true-color) "#D4D4D4" "#ffffff")))
       (bg14          (if (eq theme 'dark) (if (has-true-color) "#404147" "#262626") (if (has-true-color) "#C7C7C7" "#ffffff")))
       (bg15          (if (eq theme 'dark) (if (has-true-color) "#333540" "#262626") (if (has-true-color) "#C7C7C7" "#ffffff")))
       (bg2           (if (eq theme 'dark) (if (has-true-color) "#212329" "#1c1c1c") (if (has-true-color) "#E9EAED" "#e4e4e4")))
       (bg3           (if (eq theme 'dark) (if (has-true-color) "#0a1014" "#121212") (if (has-true-color) "#dedede" "#d0d0d0")))
       (bg4           (if (eq theme 'dark) (if (has-true-color) "#080a14" "#080808") (if (has-true-color) "#dadada" "#bcbcbc")))
       (border        (if (eq theme 'dark) (if (has-true-color) "#565C66" "#111111") (if (has-true-color) "#aaaaaa" "#b3b9be")))
       ;; (border-dim    (if (eq theme 'dark) (if (has-true-color) "#434A54" "#111111") (if (has-true-color) "#aaaaaa" "#b3b9be")))
       (border-dim    (if (eq theme 'dark) (if (has-true-color) "#434A54" "#111111") (if (has-true-color) "#BCBDBF" "#b3b9be")))
       (back-border   (if (eq theme 'dark) (if (has-true-color) "#1C1E24" "#121212") (if (has-true-color) "#dedede" "#d0d0d0")))
       (back-border2  (if (eq theme 'dark) (if (has-true-color) "#20232A" "#121212") (if (has-true-color) "#DCDDDF" "#d0d0d0")))
       (border-shadow (if (eq theme 'dark) (if (has-true-color) "#060606" "#111111") (if (has-true-color) "#555555" "#b3b9be")))
       (cblk          (if (eq theme 'dark) (if (has-true-color) "#C1C9D5" "#b2b2b2") (if (has-true-color) "#535870" "#5f5f87")))
       (cblk-bg       (if (eq theme 'dark) (if (has-true-color) "#2B2D33" "#262626") (if (has-true-color) "#E3E6F0" "#ffffff")))
       (cblk-ln       (if (eq theme 'dark) (if (has-true-color) "#757F91" "#af5faf") (if (has-true-color) "#808DB2" "#af5fdf")))
       (cblk-ln-bg    (if (eq theme 'dark) (if (has-true-color) "#303440" "#333333") (if (has-true-color) "#D8DCEB" "#dfdfff")))
       (cursor        (if (eq theme 'dark) (if (has-true-color) "#e3dedd" "#d0d0d0") (if (has-true-color) "#100a14" "#121212")))
       (preproc       (if (eq theme 'dark) (if (has-true-color) "#a45bad" "#d75fd7") (if (has-true-color) "#4e3163" "#8700af")))
       ;; (const         (if (eq theme 'dark) (if (has-true-color) "#a45bad" "#d75fd7") (if (has-true-color) "#4e3163" "#8700af")))
       ;; (const           (if (eq theme 'dark) (if (has-true-color) "#2d9578" "#2aa198") (if (has-true-color) "#2d9578" "#2aa198")))
       (const          (if (eq theme 'dark) (if (has-true-color) "#54ad4b" "#86dc2f") (if (has-true-color) "#52883c" "#00af00")))
       (emacs         (if (eq theme 'dark) (if (has-true-color) "#a45bad" "#d75fd7") (if (has-true-color) "#4e3163" "#8700af")))
       (comment       (if (eq theme 'dark) (if (has-true-color) "#2aa1ae" "#008787") (if (has-true-color) "#2aa1ae" "#008787")))
       (comment-light (if (eq theme 'dark) (if (has-true-color) "#2aa1ae" "#008787") (if (has-true-color) "#a49da5" "#008787")))
       (comment-bg    (if (eq theme 'dark) (if (has-true-color) "#31373B" "#262626") (if (has-true-color) "#ebf2eb" "#ffffff")))
       (comp          (if (eq theme 'dark) (if (has-true-color) "#67b11d" "#d75fd7") (if (has-true-color) "#5faf00" "#8700af")))
       (err           (if (eq theme 'dark) (if (has-true-color) "#E03B38" "#e0211d") (if (has-true-color) "#E03B38" "#e0211d")))
       (func          (if (eq theme 'dark) (if (has-true-color) "#248bf2" "#d75fd7") (if (has-true-color) "#2067cc" "#8700af")))
       (head-done     (if (eq theme 'dark) (if (has-true-color) "#616A73" "#585858") (if (has-true-color) "#92B3B1" "#afafd7")))
       (head1         (if (eq theme 'dark) (if (has-true-color) "#56A5EB" "#268bd2") (if (has-true-color) "#3a81c3" "#268bd2")))
       (head2         (if (eq theme 'dark) (if (has-true-color) "#2d9574" "#2aa198") (if (has-true-color) "#2d9574" "#2aa198")))
       (head3         (if (eq theme 'dark) (if (has-true-color) "#67b11d" "#67b11d") (if (has-true-color) "#579916" "#5faf00")))
       (head4       (if (eq theme 'dark) (if (has-true-color) "#2aa1ae" "#008787") (if (has-true-color) "#2aa1ae" "#008787")))
       ;; (head2         (if (eq theme 'dark) (if (has-true-color) "#2d9574" "#2aa198") (if (has-true-color) "#2d9574" "#2aa198")))
       ;; (head3         (if (eq theme 'dark) (if (has-true-color) "#67b11d" "#67b11d") (if (has-true-color) "#67b11d" "#5faf00")))
       ;; (head3         (if (eq theme 'dark) (if (has-true-color) "#b46bad" "#d75fd7") (if (has-true-color) "#4e3163" "#8700af")))
       ;; (head4         (if (eq theme 'dark) (if (has-true-color) "#b1951d" "#875f00") (if (has-true-color) "#b1951d" "#875f00")))
       (head1-bg      (if (eq theme 'dark) (if (has-true-color) "#293239" "#262626") (if (has-true-color) "#ededf9" "#ffffff")))
       (head2-bg      (if (eq theme 'dark) (if (has-true-color) "#294239" "#262626") (if (has-true-color) "#edf1ed" "#ffffff")))
       (head3-bg      (if (eq theme 'dark) (if (has-true-color) "#293239" "#262626") (if (has-true-color) "#ededf9" "#ffffff")))
       (head4-bg      (if (eq theme 'dark) (if (has-true-color) "#294239" "#262626") (if (has-true-color) "#edf1ed" "#ffffff")))
       ;; (head1-bg      (if (eq theme 'dark) (if (has-true-color) "#37434D" "#262626") (if (has-true-color) "#C8CCC8" "#ffffff")))
       ;; (head2-bg      (if (eq theme 'dark) (if (has-true-color) "#37434D" "#262626") (if (has-true-color) "#C8CCC8" "#ffffff")))
       ;; (head3-bg      (if (eq theme 'dark) (if (has-true-color) "#37434D" "#262626") (if (has-true-color) "#C8CCC8" "#ffffff")))
       ;; (head4-bg      (if (eq theme 'dark) (if (has-true-color) "#4D4D43" "#262626") (if (has-true-color) "#CCC8BB" "#ffffff")))
       (highlight     (if (eq theme 'dark) (if (has-true-color) "#3E4459" "#444444") (if (has-true-color) "#92B5D6" "#d7d7ff")))
       (highlight-dim (if (eq theme 'dark) (if (has-true-color) "#2B3747" "#444444") (if (has-true-color) "#C5C5E0" "#d7d7ff")))
       (keyword       (if (eq theme 'dark) (if (has-true-color) "#4f97d7" "#268bd2") (if (has-true-color) "#3a81c3" "#268bd2")))
       (lnum          (if (eq theme 'dark) (if (has-true-color) "#505050" "#444444") (if (has-true-color) "#a8b2bf" "#af87af")))
       (mat           (if (eq theme 'dark) (if (has-true-color) "#86dc2f" "#86dc2f") (if (has-true-color) "#ba2f59" "#af005f")))
       ;; (meta          (if (eq theme 'dark) (if (has-true-color) "#9f8766" "#af875f") (if (has-true-color) "#da8b55" "#df5f5f")))
       ;; (meta       (if (eq theme 'dark) (if (has-true-color) "#a31db1" "#af00df") (if (has-true-color) "#a31db1" "#800080")))
       (meta       (if (eq theme 'dark) (if (has-true-color) "#2aa1ae" "#008787") (if (has-true-color) "#2aa1ae" "#008787")))
       (str          (if (eq theme 'dark) (if (has-true-color) "#86ac4f" "#86dc2f") (if (has-true-color) "#52883c" "#00af00")))
       ;; (str           (if (eq theme 'dark) (if (has-true-color) "#3d9662" "#2aa198") (if (has-true-color) "#3d9662" "#2aa198")))
       ;; (str           (if (eq theme 'dark) (if (has-true-color) "#2d9672" "#2aa198") (if (has-true-color) "#2d9574" "#2aa198")))
       (suc           (if (eq theme 'dark) (if (has-true-color) "#86dc2f" "#86dc2f") (if (has-true-color) "#42ae2c" "#00af00")))
       (ttip          (if (eq theme 'dark) (if (has-true-color) "#9AA2BA" "#888888") (if (has-true-color) "#79839F" "#5f5f87")))
       (ttip-dim      (if (eq theme 'dark) (if (has-true-color) "#787F91" "#333333") (if (has-true-color) "#79839F" "#afafff")))
       (ttip-sl       (if (eq theme 'dark) (if (has-true-color) "#505B79" "#333333") (if (has-true-color) "#61ADF2" "#afafff")))
       (ttip-bg       (if (eq theme 'dark) (if (has-true-color) "#323740" "#444444") (if (has-true-color) "#DEE1E8" "#dfdfff")))
       (ttip-bg2      (if (eq theme 'dark) (if (has-true-color) "#1F3866" "#444444") (if (has-true-color) "#DEE1E8" "#dfdfff")))
       ;; (type          (if (eq theme 'dark) (if (has-true-color) "#86ac4f" "#86dc2f") (if (has-true-color) "#52883c" "#00af00")))
       (type           (if (eq theme 'dark) (if (has-true-color) "#2cafa5" "#2aa198") (if (has-true-color) "#2d9578" "#2aa198")))
       (var           (if (eq theme 'dark) (if (has-true-color) "#7590db" "#8787d7") (if (has-true-color) "#5A8AB1" "#af5fd7")))
       (war           (if (eq theme 'dark) (if (has-true-color) "#dc752f" "#dc752f") (if (has-true-color) "#dc752f" "#dc752f")))

       ;; colors
       (aqua          (if (eq theme 'dark) (if (has-true-color) "#2d9574" "#2aa198") (if (has-true-color) "#2d9574" "#2aa198")))
       (aqua-bg       (if (eq theme 'dark) (if (has-true-color) "#293235" "#262626") (if (has-true-color) "#edf2e9" "#ffffff")))
       (green         (if (eq theme 'dark) (if (has-true-color) "#67b11d" "#67b11d") (if (has-true-color) "#67b11d" "#5faf00")))
       (green-bg      (if (eq theme 'dark) (if (has-true-color) "#293235" "#262626") (if (has-true-color) "#edf2e9" "#ffffff")))
       (green-bg-s    (if (eq theme 'dark) (if (has-true-color) "#29422d" "#262626") (if (has-true-color) "#dae6d0" "#ffffff")))
       (green-bg-s2   (if (eq theme 'dark) (if (has-true-color) "#33663B" "#262626") (if (has-true-color) "#94CC67" "#ffffff")))
       (cyan          (if (eq theme 'dark) (if (has-true-color) "#28def0" "#00ffff") (if (has-true-color) "#24909A" "#008080")))
       (red           (if (eq theme 'dark) (if (has-true-color) "#f2241f" "#d70000") (if (has-true-color) "#f2241f" "#d70008")))
       (red-bg        (if (eq theme 'dark) (if (has-true-color) "#3c2a2c" "#262626") (if (has-true-color) "#faede4" "#ffffff")))
       (red-bg-s      (if (eq theme 'dark) (if (has-true-color) "#512e31" "#262626") (if (has-true-color) "#eed9d2" "#ffffff")))
       (red-bg-s2     (if (eq theme 'dark) (if (has-true-color) "#804045" "#262626") (if (has-true-color) "#99492E" "#ffffff")))
       (blue          (if (eq theme 'dark) (if (has-true-color) "#4f97d7" "#268bd2") (if (has-true-color) "#3a81c3" "#268bd2")))
       (blue-bg       (if (eq theme 'dark) (if (has-true-color) "#293239" "#262626") (if (has-true-color) "#edf1ed" "#d7d7ff")))
       (blue-bg-s     (if (eq theme 'dark) (if (has-true-color) "#2d4252" "#262626") (if (has-true-color) "#B4C9DD" "#d7d7ff")))
       (blue-bg-s2    (if (eq theme 'dark) (if (has-true-color) "#406075" "#262626") (if (has-true-color) "#AEC4D9" "#d7d7ff")))
       (blue-bg-s3    (if (eq theme 'dark) (if (has-true-color) "#2C3845" "#262626") (if (has-true-color) "#D2E0ED" "#d7d7ff")))
       (blue-bg-s4    (if (eq theme 'dark) (if (has-true-color) "#415A75" "#262626") (if (has-true-color) "#A8C4DE" "#D7E8FF")))
       (magenta       (if (eq theme 'dark) (if (has-true-color) "#a31db1" "#af00df") (if (has-true-color) "#a31db1" "#800080")))
       (yellow        (if (eq theme 'dark) (if (has-true-color) "#b1951d" "#875f00") (if (has-true-color) "#b1951d" "#875f00")))
       (yellow-bg     (if (eq theme 'dark) (if (has-true-color) "#32322c" "#262626") (if (has-true-color) "#f6f1e1" "#ffffff")))

       ;; all-the-icons
       (ati-red (if (eq theme 'dark) "#AC4142" "#AC4142"))
       (ati-lred (if (eq theme 'dark) "#EB595A" "#EB595A"))
       (ati-dred (if (eq theme 'dark) "#843031" "#843031"))
       (ati-red-alt (if (eq theme 'dark) "#ce5643" "#843031"))
       (ati-green (if (eq theme 'dark) "#90A959" "#90A959"))
       (ati-lgreen (if (eq theme 'dark) "#C6E87A" "#3D6837"))
       (ati-dgreen (if (eq theme 'dark) "#6D8143" "#6D8143"))
       (ati-yellow (if (eq theme 'dark) "#FFD446" "#FFCC0E"))
       (ati-lyellow (if (eq theme 'dark) "#FFC16D" "#FF9300"))
       (ati-dyellow (if (eq theme 'dark) "#B48D56" "#B48D56"))
       (ati-blue (if (eq theme 'dark) "#6A9FB5" "#6A9FB5"))
       (ati-blue-alt (if (eq theme 'dark) "#2188b6" "#2188b6"))
       (ati-lblue (if (eq theme 'dark) "#8FD7F4" "#677174"))
       (ati-dblue (if (eq theme 'dark) "#446674" "#446674"))
       (ati-maroon (if (eq theme 'dark) "#8F5536" "#8F5536"))
       (ati-lmaroon (if (eq theme 'dark) "#CE7A4E" "#CE7A4E"))
       (ati-dmaroon (if (eq theme 'dark) "#72584B" "#72584B"))
       (ati-purple (if (eq theme 'dark) "#AA759F" "#68295B"))
       (ati-lpurple (if (eq theme 'dark) "#E69DD6" "#E69DD6"))
       (ati-dpurple (if (eq theme 'dark) "#694863" "#694863"))
       (ati-orange (if (eq theme 'dark) "#D4843E" "#D4843E"))
       (ati-lorange (if (eq theme 'dark) "#FFA500" "#FFA500"))
       (ati-dorange (if (eq theme 'dark) "#915B2D" "#915B2D"))
       (ati-cyan (if (eq theme 'dark) "#75B5AA" "#75B5AA"))
       (ati-cyan-alt (if (eq theme 'dark) "#61dafb" "#0595bd"))
       (ati-lcyan (if (eq theme 'dark) "#A5FDEC" "#2C7D6E"))
       (ati-dcyan (if (eq theme 'dark) "#48746D" "#48746D"))
       (ati-pink (if (eq theme 'dark) "#F2B4B8" "#FC505B"))
       (ati-lpink (if (eq theme 'dark) "#FFBDC1" "#FF505B"))
       (ati-dpink (if (eq theme 'dark) "#B18286" "#7E5D5F"))
       (ati-silver (if (eq theme 'dark) "#716E68" "#716E68"))
       (ati-lsilver (if (eq theme 'dark) "#B9B6AA" "#7F7869"))
       (ati-dsilver (if (eq theme 'dark) "#838484" "#838484"))
       )

    (setq evil-normal-state-cursor `(box ,primary+1))
    ;; (setq cursor-in-non-selected-windows evil-normal-state-cursor)
    (setq evil-insert-state-cursor `(box ,base))
    (setq evil-emacs-state-cursor `(box ,emacs))
    (setq evil-replace-state-cursor `(box ,war))
    (setq evil-visual-state-cursor `(box ,suc))

    (custom-theme-set-faces
     name

;;;;; basics
     `(cursor ((,class (:background ,primary+1))))
     `(cursor-insert ((,class (:background ,primary+1))))
     `(cursor-visual ((,class (:background ,primary+1))))
     `(cursor-replace ((,class (:background ,primary+1))))
     `(custom-button ((,class :background ,bg2 :foreground ,base :box (:line-width 2 :style released-button))))
     `(default ((,class (:background ,bg1 :foreground ,base))))
     `(default-italic ((,class (:italic t))))
     `(error ((,class (:foreground ,err))))
     `(eval-sexp-fu-flash ((,class (:background ,suc :foreground ,bg1))))
     `(eval-sexp-fu-flash-error ((,class (:background ,err :foreground ,bg1))))
     `(font-lock-builtin-face ((,class (:foreground ,keyword))))
     `(font-lock-comment-face ((,class (:foreground ,base-comment :slant normal))))
     `(font-lock-constant-face ((,class (:foreground ,const))))
     `(constant-true-face ((,class (:foreground ,const :background ,green-bg-s))))
     `(constant-false-face ((,class (:foreground ,const :background ,red-bg-s))))
     `(font-lock-doc-face ((,class (:foreground ,comment :background ,comment-bg))))
     `(font-lock-function-name-face ((,class (:foreground ,func))))
     `(font-lock-keyword-face ((,class (:inherit bold :foreground ,keyword :slant normal))))
     `(font-lock-negation-char-face ((,class (:foreground ,const))))
     `(font-lock-preprocessor-face ((,class (:foreground ,preproc))))
     `(font-lock-reference-face ((,class (:foreground ,const))))
     `(font-lock-string-face ((,class (:foreground ,const :background ,green-bg-s))))
     `(font-lock-type-face ((,class (:foreground ,type))))
     `(font-lock-variable-name-face ((,class (:foreground ,var))))
     `(font-lock-warning-face ((,class (:foreground ,war :background ,bg1))))
     `(fixed-pitch ((,class ())))
     `(fringe ((,class (:background ,bg1 :foreground ,lnum))))
     `(header-line ((,class :inherit (mode-line))))
     `(highlight ((,class (:foreground ,base :background ,highlight))))
     `(hl-line ((,class (:background ,bg2))))
     `(isearch ((,class (:foreground ,mat :inverse-video t))))
     `(lazy-highlight ((,class (:inverse-video t))))
     `(link ((,class (:foreground ,comment :underline t))))
     `(link-visited ((,class (:foreground ,comp :underline t))))
     `(match ((,class (:foreground ,mat :inverse-video t))))
     `(minibuffer-prompt ((,class (:inherit bold :foreground ,keyword :underline (:color ,secondary-2 :style line)))))
     ;; `(minibuffer-background ((,class (:inherit default :background ,back-border))))
     `(sidebar-hl-line ((,class (:background ,bg11))))
     `(sidebar-background ((,class (:inherit default :background ,back-border2))))
     `(sidebar-fringe ((,class (:inherit fringe :background ,back-border2))))
     `(page-break-lines ((,class (:foreground ,act2))))
     `(region ((,class (:background ,highlight))))
     `(secondary-selection ((,class (:background ,bg3))))
     `(shadow ((,class (:foreground ,base-dim))))
     `(success ((,class (:foreground ,suc))))
     `(tooltip ((,class (:background ,ttip-sl :foreground ,base :italic nil :underline nil))))
     `(vertical-border ((,class (:foreground ,base :background ,back-border))))
     `(border ((,class (:foreground ,base :background ,back-border))))
     `(internal-border ((,class (:foreground ,base :background ,back-border))))
     `(warning ((,class (:foreground ,war))))

;;;;; ace-window
     `(aw-leading-char-face ((,class (:foreground ,func :weight bold :height 2.0 :box (:line-width 1 :color ,keyword :style released-button)))))

;;;;; ahs
     `(ahs-face ((,class (:background ,blue-bg-s2 :underline (:color ,blue :style line)))))
     `(ahs-plugin-defalt-face ((,class (:background ,blue-bg :underline (:color ,cyan :style line)))))
     `(ahs-definition-face ((,class (:background ,green-bg-s2 :underline (:color ,green :style line)))))
     `(ahs-plugin-whole-buffer-face ((,class (:background ,mat :foreground ,bg1))))

;;;;; all the icons
     `(all-the-icons-red ((,class (:height 0.8 :foreground ,ati-red))))
     `(all-the-icons-lred ((,class (:height 0.8 :foreground ,ati-lred))))
     `(all-the-icons-dred ((,class (:height 0.8 :foreground ,ati-dred))))
     `(all-the-icons-red-alt ((,class (:height 0.8 :foreground ,ati-red-alt))))
     `(all-the-icons-green ((,class (:height 0.8 :foreground ,ati-green))))
     `(all-the-icons-lgreen ((,class (:height 0.8 :foreground ,ati-lgreen))))
     `(all-the-icons-dgreen ((,class (:height 0.8 :foreground ,ati-dgreen))))
     `(all-the-icons-yellow ((,class (:height 0.8 :foreground ,ati-yellow))))
     `(all-the-icons-lyellow ((,class (:height 0.8 :foreground ,ati-lyellow))))
     `(all-the-icons-dyellow ((,class (:height 0.8 :foreground ,ati-dyellow))))
     `(all-the-icons-blue ((,class (:height 0.8 :foreground ,ati-blue))))
     `(all-the-icons-blue-alt ((,class (:height 0.8 :foreground ,ati-blue-alt))))
     `(all-the-icons-lblue ((,class (:height 0.8 :foreground ,ati-lblue))))
     `(all-the-icons-dblue ((,class (:height 0.8 :foreground ,ati-dblue))))
     `(all-the-icons-maroon ((,class (:height 0.8 :foreground ,ati-maroon))))
     `(all-the-icons-lmaroon ((,class (:height 0.8 :foreground ,ati-lmaroon))))
     `(all-the-icons-dmaroon ((,class (:height 0.8 :foreground ,ati-dmaroon))))
     `(all-the-icons-purple ((,class (:height 0.8 :foreground ,ati-purple))))
     `(all-the-icons-lpurple ((,class (:height 0.8 :foreground ,ati-lpurple))))
     `(all-the-icons-dpurple ((,class (:height 0.8 :foreground ,ati-dpurple))))
     `(all-the-icons-orange ((,class (:height 0.8 :foreground ,ati-orange))))
     `(all-the-icons-lorange ((,class (:height 0.8 :foreground ,ati-lorange))))
     `(all-the-icons-dorange ((,class (:height 0.8 :foreground ,ati-dorange))))
     `(all-the-icons-cyan ((,class (:height 0.8 :foreground ,ati-cyan))))
     `(all-the-icons-cyan-alt ((,class (:height 0.8 :foreground ,ati-cyan-alt))))
     `(all-the-icons-lcyan ((,class (:height 0.8 :foreground ,ati-lcyan))))
     `(all-the-icons-dcyan ((,class (:height 0.8 :foreground ,ati-dcyan))))
     `(all-the-icons-pink ((,class (:height 0.8 :foreground ,ati-pink))))
     `(all-the-icons-lpink ((,class (:height 0.8 :foreground ,ati-lpink))))
     `(all-the-icons-dpink ((,class (:height 0.8 :foreground ,ati-dpink))))
     `(all-the-icons-silver ((,class (:height 0.8 :foreground ,ati-silver))))
     `(all-the-icons-lsilver ((,class (:height 0.8 :foreground ,ati-lsilver))))
     `(all-the-icons-dsilver ((,class (:height 0.8 :foreground ,ati-dsilver))))

;;;;; anzu-mode
     `(anzu-mode-line ((,class (:foreground ,yellow :inherit bold))))

;;;;; auto-complete
     `(ac-completion-face ((,class (:background ,ttip-bg :foreground ,ttip))))

;;;;; avy
     `(avy-lead-face   ((,class (:inherit bold :background ,green-bg :foreground ,green))))
     `(avy-lead-face-0 ((,class (:inherit bold :background ,green-bg :foreground ,yellow))))
     `(avy-lead-face-1 ((,class (:inherit bold :background ,green-bg :foreground ,magenta))))
     `(avy-lead-face-2 ((,class (:inherit bold :background ,green-bg :foreground ,blue))))

;;;;; calfw
     `(cfw:face-title               ((,class (:foreground ,head1 :height 2.0 :weight bold :inherit variable-pitch))))
     `(cfw:face-header              ((,class (:foreground ,base :weight bold))))
     `(cfw:face-saturday            ((,class (:foreground ,base :weight bold))))
     `(cfw:face-sunday              ((,class (:foreground ,base :weight bold))))
     `(cfw:face-holiday             ((,class (:foreground ,head1 :weight bold))))
     `(cfw:face-grid                ((,class (:foreground ,border))))
     `(cfw:face-default-content     ((,class (:foreground ,green))))
     `(cfw:face-periods             ((,class (:foreground ,cyan))))
     `(cfw:face-day-title           ((,class (:background ,head1-bg))))
     `(cfw:face-default-day         ((,class (:foreground ,base :weight bold))))
     `(cfw:face-annotation          ((,class (:foreground ,aqua))))
     `(cfw:face-disable             ((,class (:foreground ,base-dim))))
     `(cfw:face-today-title         ((,class (:background ,blue :weight bold))))
     `(cfw:face-today               ((,class (:background ,head1-bg :weight bold))))
     `(cfw:face-select              ((,class (:background ,magenta :weight bold))))
     `(cfw:face-toolbar             ((,class (:foreground ,base :background ,bg1))))
     `(cfw:face-toolbar-button-off  ((,class (:foreground ,base :weight bold))))
     `(cfw:face-toolbar-button-on   ((,class (:foreground ,base :weight bold))))

;;;;; cider
     `(cider-enlightened ((,class (:background nil :box (:color ,yellow :line-width -1 :style nil) :foreground ,yellow))))
     `(cider-enlightened-local ((,class (:foreground ,yellow))))
     `(cider-instrumented-face ((,class (:background nil :box (:color ,red :line-width -1 :style nil) :foreground ,red))))
     `(cider-result-overlay-face ((,class (:background nil :box (:color ,blue :line-width -1 :style nil) :foreground ,blue))))
     `(cider-test-error-face ((,class (:background ,war :foreground ,bg1))))
     `(cider-test-failure-face ((,class (:background ,err :foreground ,bg1))))
     `(cider-test-success-face ((,class (:background ,suc :foreground ,bg1))))
     `(cider-traced-face ((,class :box (:color ,cyan :line-width -1 :style nil))))

;;;;; companion
     `(companion-face ((,class (:inherit default :background ,back-border2))))
     `(companion-dim-face ((,class (:inherit default :foreground ,base-dim2))))
     `(companion-secondary ((,class (:inherit default :background ,back-border2))))
     `(companion-notif-icon-info ((,class (:foreground ,suc :inherit companion-face))))
     `(companion-notif-icon-warn ((,class (:foreground ,err :inherit companion-face))))

;;;;; company
     `(company-echo-common ((,class (:background ,base :foreground ,bg1))))
     `(company-preview ((,class (:foreground ,ttip-dim :background ,bg2))))
     `(company-preview-active-face ((,class (:foreground ,base :background ,ttip-bg))))
     `(company-preview-common ((,class (:inherit company-preview))))
     `(company-preview-search ((,class (:inherit match))))
     `(company-scrollbar-bg ((,class (:background ,bg2))))
     `(company-scrollbar-fg ((,class (:background ,act2))))
     `(company-template-field ((,class (:inherit region))))
     `(company-tooltip ((,class (:background ,back-border :foreground ,base))))
     `(company-tooltip-annotation ((,class (:foreground ,type))))
     `(company-tooltip-common ((,class (:background ,back-border :foreground ,keyword))))
     `(company-tooltip-common-selection ((,class (:foreground ,base))))
     `(company-tooltip-mouse ((,class (:inherit highlight))))
     `(company-tooltip-search ((,class (:inherit match))))
     `(company-tooltip-selection ((,class (:background ,ttip-sl :foreground ,base))))

;;;;; diff
     `(diff-added             ((,class :background ,green-bg-s)))
     `(diff-changed           ((,class :background ,blue-bg-s)))
     `(diff-header            ((,class :background ,cblk-ln-bg :foreground ,func)))
     `(diff-file-header       ((,class :background ,cblk-ln-bg :foreground ,cblk)))
     `(diff-indicator-added   ((,class :background nil :foreground ,green)))
     `(diff-indicator-changed ((,class :background nil :foreground ,keyword)))
     `(diff-indicator-removed ((,class :background nil :foreground ,red)))
     `(diff-refine-added      ((,class :background ,green :foreground ,bg4)))
     `(diff-refine-changed    ((,class :background ,keyword :foreground ,bg4)))
     `(diff-refine-removed    ((,class :background ,red :foreground ,bg4)))
     `(diff-removed           ((,class :background ,red-bg-s)))

;;;;; diff-hl
     `(diff-hl-change ((,class :background ,blue-bg :foreground ,blue)))
     `(diff-hl-delete ((,class :background ,red-bg :foreground ,red)))
     `(diff-hl-insert ((,class :background ,green-bg :foreground ,green)))

;;;;; dired
     `(dired-directory ((,class (:foreground ,keyword :background nil :inherit bold))))
     `(dired-flagged ((,class (:foreground ,red))))
     `(dired-header ((,class (:foreground ,comp :inherit bold))))
     `(dired-ignored ((,class (:inherit shadow))))
     `(dired-mark ((,class (:foreground ,comp :inherit bold))))
     `(dired-marked ((,class (:foreground ,magenta :inherit bold))))
     `(dired-perm-write ((,class (:foreground ,base :underline t))))
     `(dired-symlink ((,class (:foreground ,cyan :background nil :inherit bold))))
     `(dired-warning ((,class (:foreground ,war))))

;;;;; ediff
     `(ediff-current-diff-A ((,class(:background ,red-bg-s :foreground ,red))))
     `(ediff-current-diff-Ancestor ((,class(:background ,aqua-bg :foreground ,aqua))))
     `(ediff-current-diff-B ((,class(:background ,green-bg-s :foreground ,green))))
     `(ediff-current-diff-C ((,class(:background ,blue-bg :foreground ,blue))))
     `(ediff-even-diff-A ((,class(:background ,bg3))))
     `(ediff-even-diff-Ancestor ((,class(:background ,bg3))))
     `(ediff-even-diff-B ((,class(:background ,bg3))))
     `(ediff-even-diff-C ((,class(:background ,bg3))))
     `(ediff-fine-diff-A ((,class(:background nil :inherit bold))))
     `(ediff-fine-diff-Ancestor ((,class(:background nil :inherit bold))))
     `(ediff-fine-diff-B ((,class(:background nil :inherit bold))))
     `(ediff-fine-diff-C ((,class(:background nil :inherit bold))))
     `(ediff-odd-diff-A ((,class(:background ,bg4))))
     `(ediff-odd-diff-Ancestor ((,class(:background ,bg4))))
     `(ediff-odd-diff-B ((,class(:background ,bg4))))
     `(ediff-odd-diff-C ((,class(:background ,bg4))))

;;;;; ein
     `(ein:cell-input-area((,class (:background ,bg2))))
     `(ein:cell-input-prompt ((,class (:foreground ,suc))))
     `(ein:cell-output-prompt ((,class (:foreground ,err))))
     `(ein:notification-tab-normal ((,class (:foreground ,keyword))))
     `(ein:notification-tab-selected ((,class (:foreground ,suc :inherit bold))))

;;;;; eldoc
     `(eldoc-highlight-function-argument ((,class (:foreground ,mat :inherit bold))))

;;;;; elfeed
     `(elfeed-search-date-face ((,class (:foreground ,head2))))
     `(elfeed-search-feed-face ((,class (:foreground ,blue))))
     `(elfeed-search-tag-face ((,class (:foreground ,func))))
     `(elfeed-search-title-face ((,class (:foreground ,var))))
     `(elfeed-search-unread-title-face ((,class (:foreground ,base))))

;;;;; emms
     `(emms-playlist-track-face ((,class (:foreground ,var))))
     `(emms-playlist-selected-face ((,class (:inherit bold :foreground ,suc))))

;;;;; enh-ruby
     `(enh-ruby-op-face ((,class (:background ,bg1 :foreground ,base))))
     `(enh-ruby-string-delimiter-face ((,class (:foreground ,str))))

;;;;; erc
     `(erc-input-face ((,class (:foreground ,func))))
     `(erc-my-nick-face ((,class (:foreground ,keyword))))
     `(erc-nick-default-face ((,class (:foreground ,keyword))))
     `(erc-nick-prefix-face ((,class (:foreground ,yellow))))
     `(erc-notice-face ((,class (:foreground ,str))))
     `(erc-prompt-face ((,class (:foreground ,mat :inherit bold))))
     `(erc-timestamp-face ((,class (:foreground ,keyword))))

;;;;; eshell
     `(eshell-ls-archive ((,class (:foreground ,red :inherit bold))))
     `(eshell-ls-backup ((,class (:inherit font-lock-comment-face))))
     `(eshell-ls-clutter ((,class (:inherit font-lock-comment-face))))
     `(eshell-ls-directory ((,class (:foreground ,keyword :inherit bold))))
     `(eshell-ls-executable ((,class (:foreground ,suc :inherit bold))))
     `(eshell-ls-missing ((,class (:inherit font-lock-warning-face))))
     `(eshell-ls-product ((,class (:inherit font-lock-doc-face))))
     `(eshell-ls-special ((,class (:foreground ,yellow :inherit bold))))
     `(eshell-ls-symlink ((,class (:foreground ,cyan :inherit bold))))
     `(eshell-ls-unreadable ((,class (:foreground ,base))))
     `(eshell-prompt ((,class (:foreground ,keyword :inherit bold))))

;;;;; ESS
     `(ess-assignment-face ((,class (:foreground ,type :inherit bold))))
     `(ess-backquoted-face ((,class (:foreground ,var))))
     `(ess-constant-face ((,class (:inherit font-lock-constant-face))))
     `(ess-f-t-face ((,class (:inherit font-lock-constant-face))))
     `(ess-function-call-face ((,class (:foreground ,func))))
     `(ess-keyword-face ((,class (:inherit font-lock-keyword-face))))
     `(ess-matrix-face ((,class (:foreground ,base-dim))))
     `(ess-modifiers-face ((,class (:foreground ,keyword))))
     `(ess-numbers-face ((,class (:inherit font-lock-constant-face))))
     `(ess-operator-face ((,class (:foreground ,var))))
     `(ess-paren-face ((,class (:foreground ,blue))))

;;;;; evil
     `(evil-ex-substitute-matches ((,class (:background ,red-bg :foreground ,red :strike-through t))))
     `(evil-ex-substitute-replacement ((,class (:background ,green-bg :foreground ,green :inherit bold))))

;;;;; evil-goggles
     `(evil-goggles--pulse-face ((,class (:background ,yellow-bg :foreground ,yellow))))
     `(evil-goggles-change-face ((,class (:background ,red-bg-s))))
     `(evil-goggles-commentary-face ((,class (:background ,aqua-bg))))
     `(evil-goggles-delete-face ((,class (:background ,red-bg-s))))
     `(evil-goggles-fill-and-move-face ((,class (:background ,green-bg-s))))
     `(evil-goggles-indent-face ((,class (:background ,green-bg-s))))
     `(evil-goggles-join-face ((,class (:background ,green-bg-s))))
     `(evil-goggles-nerd-commenter-face ((,class (:background ,aqua-bg))))
     `(evil-goggles-paste-face ((,class (:background ,green-bg-s))))
     `(evil-goggles-record-macro-face ((,class (:background ,blue-bg-s))))
     `(evil-goggles-replace-with-register-face ((,class (:background ,yellow-bg))))
     `(evil-goggles-set-marker-face ((,class (:background ,blue-bg-s))))
     `(evil-goggles-shift-face ((,class (:background ,blue-bg-s))))
     `(evil-goggles-surround-face ((,class (:background ,green-bg-s))))
     `(evil-goggles-yank-face ((,class (:background ,blue-bg-s))))
     `(evil-goggles-undo-redo-add-face ((,class (:background ,green-bg-s))))
     `(evil-goggles-undo-redo-change-face ((,class (:background ,blue-bg-s))))
     `(evil-goggles-undo-redo-remove-face ((,class (:background ,red-bg-s))))

;;;;; flycheck
     `(flycheck-error
       ((,(append '((supports :underline (:style line))) class)
         (:underline (:style line :color ,err)))
        (,class (:foreground ,base :background ,err :inherit bold :underline t))))
     `(flycheck-error-list-checker-name ((,class (:foreground ,keyword))))
     `(flycheck-fringe-error ((,class (:foreground ,err :inherit bold))))
     `(flycheck-fringe-info ((,class (:foreground ,keyword :inherit bold))))
     `(flycheck-fringe-warning ((,class (:foreground ,war :inherit bold))))
     `(flycheck-info
       ((,(append '((supports :underline (:style line))) class)
         (:underline (:style line :color ,keyword)))
        (,class (:foreground ,base :background ,keyword :inherit bold :underline t))))
     `(flycheck-warning
       ((,(append '((supports :underline (:style line))) class)
         (:underline (:style line :color ,war)))
        (,class (:foreground ,base :background ,war :inherit bold :underline t))))

;;;;; flymake
     `(flymake-error ((,(append '((supports :underline (:style line))) class)
                       (:underline (:style line :color ,err)))
                      (,class (:foreground ,base :background ,err :inherit bold :underline t))))
     `(flymake-note ((,(append '((supports :underline (:style line))) class)
                      (:underline (:style wave :color ,keyword)))
                     (,class (:foreground ,base :background ,keyword :inherit bold :underline t))))
     `(flymake-warning ((,(append '((supports :underline (:style line))) class)
                         (:underline (:style line :color ,war)))
                        (,class (:foreground ,base :background ,war :inherit bold :underline t))))

;;;;; flyspell
     `(flyspell-incorrect ((,(append '((supports :underline (:style line))) class)
                            (:underline (:style wave :color ,war)))
                           (,class (:foreground ,base :background ,war :inherit bold :underline t))))
     `(flyspell-duplicate ((,(append '((supports :underline (:style line))) class)
                            (:underline (:style wave :color ,keyword)))
                           (,class (:foreground ,base :background ,keyword :inherit bold :underline t))))

;;;;; jabber
     `(jabber-activity-face ((,class (:inherit bold :foreground ,red))))
     `(jabber-activity-personal-face ((,class (:inherit bold :foreground ,blue))))
     `(jabber-chat-error ((,class (:inherit bold :foreground ,red))))
     `(jabber-chat-prompt-foreign ((,class (:inherit bold :foreground ,red))))
     `(jabber-chat-prompt-local ((,class (:inherit bold :foreground ,blue))))
     `(jabber-chat-prompt-system ((,class (:inherit bold :foreground ,green))))
     `(jabber-chat-text-foreign ((,class (:foreground ,base))))
     `(jabber-chat-text-local ((,class (:foreground ,base))))
     `(jabber-rare-time-face ((,class (:foreground ,green))))
     `(jabber-roster-user-away ((,class (:foreground ,yellow))))
     `(jabber-roster-user-chatty ((,class (:inherit bold :foreground ,green))))
     `(jabber-roster-user-dnd ((,class (:foreground ,red))))
     `(jabber-roster-user-error ((,class (:foreground ,err))))
     `(jabber-roster-user-offline ((,class (:foreground ,base))))
     `(jabber-roster-user-online ((,class (:inherit bold :foreground ,green))))
     `(jabber-roster-user-xa ((,class (:foreground ,aqua))))

;;;;; git-gutter
     `(git-gutter:added ((,class (:foreground ,green :background nil))))
     `(git-gutter:deleted ((,class (:foreground ,red :background nil))))
     `(git-gutter:modified ((,class (:foreground ,blue :background nil))))

;;;;; git-gutter-fr
     `(git-gutter-fr:added ((,class (:foreground ,green :inherit bold))))
     `(git-gutter-fr:deleted ((,class (:foreground ,red :inherit bold))))
     `(git-gutter-fr:modified ((,class (:foreground ,blue :inherit bold))))

;;;;; git-timemachine
     `(git-timemachine-minibuffer-detail-face ((,class (:foreground ,blue :inherit bold :background ,blue-bg))))

;;;;; gnus
     `(gnus-emphasis-highlight-words ((,class (:background ,suc :foreground ,bg1))))
     `(gnus-header-content ((,class (:foreground ,keyword))))
     `(gnus-header-from ((,class (:foreground ,var))))
     `(gnus-header-name ((,class (:foreground ,comp))))
     `(gnus-header-subject ((,class (:foreground ,func :inherit bold))))
     `(gnus-summary-cancelled ((,class (:background ,war :foreground ,bg1))))

;;;;; guide-key
     `(guide-key/highlight-command-face ((,class (:foreground ,base))))
     `(guide-key/key-face ((,class (:foreground ,keyword))))
     `(guide-key/prefix-command-face ((,class (:foreground ,keyword :inherit bold))))

;;;;; helm
     `(helm-bookmark-directory ((,class (:inherit helm-ff-directory))))
     `(helm-bookmark-file ((,class (:foreground ,base))))
     `(helm-bookmark-gnus ((,class (:foreground ,comp))))
     `(helm-bookmark-info ((,class (:foreground ,comp))))
     `(helm-bookmark-man ((,class (:foreground ,comp))))
     `(helm-bookmark-w3m ((,class (:foreground ,comp))))
     `(helm-buffer-directory ((,class (:foreground ,base :background ,bg1))))
     `(helm-buffer-file ((,class (:foreground ,base :background ,bg1))))
     `(helm-buffer-not-saved ((,class (:foreground ,comp :background ,bg1))))
     `(helm-buffer-process ((,class (:foreground ,keyword :background ,bg1))))
     `(helm-buffer-saved-out ((,class (:foreground ,base :background ,bg1))))
     `(helm-buffer-size ((,class (:foreground ,base :background ,bg1))))
     `(helm-candidate-number ((,class (:background ,bg1 :foreground ,keyword :inherit bold))))
     `(helm-ff-directory ((,class (:foreground ,keyword :background ,bg1 :inherit bold))))
     `(helm-ff-dotted-directory ((,class (:foreground ,keyword :background ,bg1 :inherit bold))))
     `(helm-ff-dotted-symlink-directory ((,class (:foreground ,cyan :background ,bg1 :inherit bold))))
     `(helm-ff-executable ((,class (:foreground ,suc :background ,bg1 :weight normal))))
     `(helm-ff-file ((,class (:foreground ,base :background ,bg1 :weight normal))))
     `(helm-ff-invalid-symlink ((,class (:foreground ,red :background ,bg1 :inherit bold))))
     `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
     `(helm-ff-symlink ((,class (:foreground ,cyan :background ,bg1 :inherit bold))))
     `(helm-grep-cmd-line ((,class (:foreground ,base :background ,bg1))))
     `(helm-grep-file ((,class (:foreground ,base :background ,bg1))))
     `(helm-grep-finish ((,class (:foreground ,base :background ,bg1))))
     `(helm-grep-lineno ((,class (:foreground ,type :background ,bg1 :inherit bold))))
     `(helm-grep-match ((,class (:foreground nil :background nil :inherit helm-match))))
     ;; `(helm-header ((,class (:foreground ,base :background ,bg1 :underline nil :box nil))))
     `(helm-header ((,class (:inherit (header-line)))))
     `(helm-header-line-left-margin ((,class (:foreground ,keyword :background ,nil))))
     `(helm-match ((,class (:background ,head1-bg :foreground ,head1 :inherit bold))))
     `(helm-match-item ((,class (:background ,head1-bg :foreground ,head1))))
     `(helm-moccur-buffer ((,class (:foreground ,var :background ,bg1))))
     `(helm-selection ((,class (:background ,highlight))))
     `(helm-selection-line ((,class (:background ,bg2))))
     `(helm-separator ((,class (:foreground ,primary+1 :background ,bg1))))
     `(helm-source-header ((,class (:background ,primary+1 :height 1.2 :foreground ,bg1 :inherit bold))))
     `(helm-time-zone-current ((,class (:foreground ,keyword :background ,bg1))))
     `(helm-time-zone-home ((,class (:foreground ,primary+1 :background ,bg1))))
     `(helm-visible-mark ((,class (:foreground ,keyword :background ,bg3))))

;;;;; helm-swoop
     `(helm-swoop-target-line-block-face ((,class (:foreground ,base :background ,highlight))))
     `(helm-swoop-target-line-face ((,class (:background ,highlight))))
     `(helm-swoop-target-word-face ((,class (:background ,highlight :foreground ,mat))))

;;;;; highlights
     `(hi-green  ((,class (:foreground ,green :background ,green-bg))))
     `(hi-yellow ((,class (:foreground ,yellow :background ,yellow-bg))))

;;;;; highlight-function-calls
     `(highlight-function-calls-face ((,class (:foreground ,keyword :weight normal))))

;;;;; highlight-indentation
     `(highlight-indentation-face ((,class (:background ,bg12))))
     `(highlight-indentation-face-1 ((,class (:background ,bg12))))
     `(highlight-indentation-face-2 ((,class (:background ,bg12b))))
     `(highlight-indentation-face-3 ((,class (:background ,bg12))))
     `(highlight-indentation-face-4 ((,class (:background ,bg12b))))
     `(highlight-indentation-face-5 ((,class (:background ,bg12))))
     `(highlight-indentation-face-6 ((,class (:background ,bg12b))))
     `(highlight-indentation-face-7 ((,class (:background ,bg12))))
     `(highlight-indentation-face-8 ((,class (:background ,bg12b))))

;;;;; highlight-symbol
     `(highlight-symbol-face ((,class (:background ,bg2))))

;;;;; hl-todo
     `(hl-todo ((,class (:foreground ,war))))

;;;;; hydra
     `(hydra-face-blue ((,class (:foreground ,blue))))
     `(hydra-face-red ((,class (:foreground ,red))))

;;;;; ido
     `(ido-first-match ((,class (:foreground ,comp :inherit bold))))
     `(ido-only-match ((,class (:foreground ,mat :inherit bold))))
     `(ido-subdir ((,class (:foreground ,keyword))))
     `(ido-vertical-match-face ((,class (:foreground ,comp :underline nil))))

;;;;; imenu-list
     `(imenu-list-entry-face ((,class ())))
     `(imenu-list-entry-face-0 ((,class (:foreground ,head1))))
     `(imenu-list-entry-face-1 ((,class (:foreground ,head2))))
     `(imenu-list-entry-face-2 ((,class (:foreground ,head3))))
     `(imenu-list-entry-face-3 ((,class (:foreground ,head4))))
     `(imenu-list-entry-subalist-face-0 ((,class (:inherit bold :foreground ,head2 :box (:line-width 3 :color ,back-border2)))))
     `(imenu-list-entry-subalist-face-1 ((,class (:inherit bold :foreground ,head1 :box (:line-width 3 :color ,back-border2)))))
     `(imenu-list-entry-subalist-face-2 ((,class (:inherit (org-level-5 bold) :box (:line-width 3 :color ,back-border2)))))
     `(imenu-list-entry-subalist-face-3 ((,class (:inherit (org-level-5 bold) :box (:line-width 3 :color ,back-border2)))))

;;;;; info
     `(info-header-xref ((,class (:foreground ,func :underline t))))
     `(info-menu ((,class (:foreground ,suc))))
     `(info-node ((,class (:foreground ,func :inherit bold))))
     `(info-quoted-name ((,class (:foreground ,keyword))))
     `(info-reference-item ((,class (:background nil :underline t :inherit bold))))
     `(info-string ((,class (:foreground ,str))))
     `(info-title-1 ((,class (:height 1.4 :inherit bold))))
     `(info-title-2 ((,class (:height 1.3 :inherit bold))))
     `(info-title-3 ((,class (:height 1.3))))
     `(info-title-4 ((,class (:height 1.2))))

;;;;; ivy
     `(ivy-current-match ((,class (:background ,blue-bg-s))))
     `(ivy-minibuffer-match-face-1 ((,class (:underline t))))
     `(ivy-minibuffer-match-face-2 ((,class (:foreground ,head1 :underline t))))
     `(ivy-minibuffer-match-face-3 ((,class (:foreground ,head4 :underline t))))
     `(ivy-minibuffer-match-face-4 ((,class (:foreground ,head3 :underline t))))
     `(ivy-remote ((,class (:foreground ,cyan))))

;;;;; ivy-posframe
     `(ivy-posframe ((,class (:inherit default :background ,back-border))))
     `(ivy-posframe-border ((,class (:background ,secondary-1))))

;;;;; latex
     `(font-latex-bold-face ((,class (:inherit bold))))
     `(font-latex-italic-face ((,class (:italic t))))
     `(font-latex-math-face ((,class (:foreground ,comp))))
     `(font-latex-verbatim-face ((,class (:inherit org-verbatim))))
     `(font-latex-script-char-face ((,class (:foreground ,keyword))))
     `(font-latex-warning-face ((,class (:foreground ,war))))
     `(font-latex-match-reference-keywords ((,class (:foreground ,const))))
     `(font-latex-match-variable-keywords ((,class (:foreground ,var))))
     `(font-latex-sectioning-0-face ((,class (:inherit bold :foreground ,head3 :height 1.3 :background ,head3-bg))))
     `(font-latex-sectioning-1-face ((,class (:inherit bold :foreground ,head4 :height 1.3 :background ,head4-bg))))
     `(font-latex-sectioning-2-face ((,class (:inherit bold :foreground ,head1 :height 1.3 :background ,head1-bg))))
     `(font-latex-sectioning-3-face ((,class (:inherit bold :foreground ,head2 :height 1.2 :background ,head2-bg))))
     `(font-latex-sectioning-4-face ((,class (:foreground ,head3 :height 1.1 :background ,head3-bg))))
     `(font-latex-sectioning-5-face ((,class (:foreground ,head4 :background ,head4-bg))))
     `(font-latex-string-face ((,class (:foreground ,str))))
     `(font-latex-warning-face ((,class (:foreground ,war))))

;;;;; ledger-mode
     `(ledger-font-directive-face ((,class (:foreground ,meta))))
     `(ledger-font-posting-amount-face ((,class (:foreground ,yellow))))
     `(ledger-font-posting-date-face ((,class (:foreground ,head1))))
     `(ledger-occur-xact-face ((,class (:background ,bg2))))

;;;;; linum-mode
     `(linum ((,class (:foreground ,lnum :background ,bg2 :inherit default))))

;;;;; display-line-numbers-mode (Emacs 26+)
     (when (>= emacs-major-version 26)
       `(line-number ((,class (:foreground ,lnum :background ,bg2))))
       `(line-number-current-line ((,class (:foreground ,base :background ,bg2)))))

;;;;; linum-relative
     `(linum-relative-current-face ((,class (:foreground ,comp))))

;;;;; magit
     `(magit-blame-culprit ((,class :background ,yellow-bg :foreground ,yellow)))
     `(magit-blame-date    ((,class :background ,yellow-bg :foreground ,green)))
     `(magit-blame-hash    ((,class :background ,yellow-bg :foreground ,func)))
     `(magit-blame-header  ((,class :background ,yellow-bg :foreground ,green)))
     `(magit-blame-heading ((,class :background ,yellow-bg :foreground ,green)))
     `(magit-blame-name    ((,class :background ,yellow-bg :foreground ,yellow)))
     `(magit-blame-sha1    ((,class :background ,yellow-bg :foreground ,func)))
     `(magit-blame-subject ((,class :background ,yellow-bg :foreground ,yellow)))
     `(magit-blame-summary ((,class :background ,yellow-bg :foreground ,yellow)))
     `(magit-blame-time    ((,class :background ,yellow-bg :foreground ,green)))
     `(magit-branch ((,class (:foreground ,const :inherit bold))))
     `(magit-branch-current ((,class (:background ,blue-bg :foreground ,blue :inherit bold :box t))))
     `(magit-branch-local ((,class (:background ,blue-bg :foreground ,blue :inherit bold))))
     `(magit-branch-remote ((,class (:background ,aqua-bg :foreground ,aqua :inherit bold))))
     `(magit-diff-context-highlight ((,class (:background ,bg2 :foreground ,base))))
     `(magit-diff-hunk-heading ((,class (:background ,ttip-bg :foreground ,ttip))))
     `(magit-diff-hunk-heading-highlight ((,class (:background ,ttip-sl :foreground ,base))))
     `(magit-hash ((,class (:foreground ,var))))
     `(magit-hunk-heading           ((,class (:background ,bg3))))
     `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
     `(magit-item-highlight ((,class :background ,bg2)))
     `(magit-log-author ((,class (:foreground ,func))))
     `(magit-log-head-label-head ((,class (:background ,yellow :foreground ,bg1 :inherit bold))))
     `(magit-log-head-label-local ((,class (:background ,keyword :foreground ,bg1 :inherit bold))))
     `(magit-log-head-label-remote ((,class (:background ,suc :foreground ,bg1 :inherit bold))))
     `(magit-log-head-label-tags ((,class (:background ,magenta :foreground ,bg1 :inherit bold))))
     `(magit-log-head-label-wip ((,class (:background ,cyan :foreground ,bg1 :inherit bold))))
     `(magit-log-sha1 ((,class (:foreground ,str))))
     `(magit-process-ng ((,class (:foreground ,war :inherit bold))))
     `(magit-process-ok ((,class (:foreground ,func :inherit bold))))
     `(magit-reflog-amend ((,class (:foreground ,magenta))))
     `(magit-reflog-checkout ((,class (:foreground ,blue))))
     `(magit-reflog-cherry-pick ((,class (:foreground ,green))))
     `(magit-reflog-commit ((,class (:foreground ,green))))
     `(magit-reflog-merge ((,class (:foreground ,green))))
     `(magit-reflog-other ((,class (:foreground ,cyan))))
     `(magit-reflog-rebase ((,class (:foreground ,magenta))))
     `(magit-reflog-remote ((,class (:foreground ,cyan))))
     `(magit-reflog-reset ((,class (:foreground ,red))))
     `(magit-section-heading        ((,class (:foreground ,keyword :inherit bold))))
     `(magit-section-highlight      ((,class (:background ,bg2))))
     `(magit-section-title ((,class (:background ,bg1 :foreground ,keyword :inherit bold))))

;;;;; man
     `(Man-overstrike ((,class (:foreground ,head1 :inherit bold))))
     `(Man-reverse ((,class (:foreground ,highlight))))
     `(Man-underline ((,class (:foreground ,comp :underline t))))

;;;;; markdown
     `(markdown-header-face-1 ((,class (:inherit bold :foreground ,head1 :height 1.3 :background ,head1-bg))))
     `(markdown-header-face-2 ((,class (:inherit bold :foreground ,head2 :height 1.2 :background ,head2-bg))))
     `(markdown-header-face-3 ((,class (:foreground ,head3 :height 1.1 :background ,head3-bg))))
     `(markdown-header-face-4 ((,class (:foreground ,head4 :background ,head4-bg))))
     `(markdown-header-face-5 ((,class (:foreground ,head1))))
     `(markdown-header-face-6 ((,class (:foreground ,head2))))
     `(markdown-table-face ((,class (:foreground ,base :background ,head1-bg))))

;;;;; mode-line
     ;; `(mode-line           ((,class (:foreground ,base :background ,secondary-41 :box (:color ,border-dim :line-width 1 :style nil)))))
     ;; `(mode-line-inactive  ((,class (:foreground ,base :background ,secondary-4 :box (:color ,border-dim :line-width 1 :style nil)))))
     `(mode-line           ((,class (:foreground ,mode-line-4-fg :background ,mode-line-4-bg :box (:color ,border-dim :line-width 1 :style nil)))))
     `(mode-line-inactive  ((,class (:foreground ,mode-line-4-fg-inactive :background ,mode-line-4-bg-inactive :box (:color ,border-dim :line-width 1 :style nil)))))
     ;; `(mode-line           ((,class (:foreground ,base :background ,secondary-41 :box (:color ,border :line-width 1 :style ,(if (eq theme 'dark) 'released-button nil))))))
     ;; `(mode-line-inactive  ((,class (:foreground ,base :background ,secondary-4 :box (:color ,border :line-width 1 :style ,(if (eq theme 'dark) 'released-button nil))))))
     `(mode-line-buffer-id ((,class (:foreground ,mode-line-buffer-id :inherit bold))))
     `(mode-line-buffer-id-inactive ((,class (:foreground ,mode-line-buffer-id-inactive :inherit bold))))

;;;;; mu4e
     `(mu4e-attach-number-face ((,class (:foreground ,var))))
     `(mu4e-cited-1-face ((,class (:foreground ,head1))))
     `(mu4e-cited-2-face ((,class (:foreground ,head2))))
     `(mu4e-cited-3-face ((,class (:foreground ,head3))))
     `(mu4e-cited-4-face ((,class (:foreground ,head4))))
     `(mu4e-cited-5-face ((,class (:foreground ,head1))))
     `(mu4e-cited-6-face ((,class (:foreground ,head2))))
     `(mu4e-cited-7-face ((,class (:foreground ,head3))))
     `(mu4e-contact-face ((,class (:foreground ,func))))
     `(mu4e-draft-face ((,class (:foreground ,var))))
     `(mu4e-flagged-face ((,class (:foreground ,yellow :inherit bold))))
     `(mu4e-header-key-face ((,class (:foreground ,meta :inherit bold))))
     `(mu4e-header-title-face ((,class (:foreground ,keyword :inherit bold))))
     `(mu4e-header-marks-face ((,class (:foreground ,comp))))
     `(mu4e-header-value-face ((,class (:foreground ,keyword :inherit bold))))
     `(mu4e-header-highlight-face ((,class (:background ,highlight))))
     `(mu4e-highlight-face ((,class (:foreground ,comp))))
     `(mu4e-title-face ((,class (:foreground ,head2 :inherit bold))))
     `(mu4e-replied-face ((,class (:foreground ,green))))
     `(mu4e-modeline-face ((,class (:foreground ,yellow))))
     `(mu4e-special-header-value-face ((,class (:foreground ,green))))
     `(mu4e-unread-face ((,class (:foreground ,head1 :inherit bold))))
     `(mu4e-view-url-number-face ((,class (:foreground ,comp))))

;;;;; mu4e-maildirs
     `(mu4e-maildirs-extension-maildir-hl-face ((,class (:foreground ,head1 :inherit bold))))

;;;;; notmuch
     `(notmuch-search-date ((,class (:foreground ,func))))
     `(notmuch-search-flagged-face ((,class (:weight extra-bold))))
     `(notmuch-search-non-matching-authors ((,class (:foreground ,base-dim))))
     `(notmuch-search-unread-face ((,class (:background ,highlight-dim :box ,border))))
     `(notmuch-tag-face ((,class (:foreground ,keyword))))
     `(notmuch-tag-flagged ((,class (:foreground ,war))))

;;;;; neotree
     `(neo-dir-link-face ((,class (:foreground ,keyword :box (:line-width 3 :color ,back-border2)))))
     `(neo-expand-btn-face ((,class (:foreground ,base))))
     `(neo-file-link-face ((,class (:foreground ,base))))
     `(neo-vc-up-to-date-face ((,class (:inherit neo-file-link-face))))
     `(neo-vc-needs-update-face ((,class (:inherit neo-file-link-face))))
     `(neo-vc-default-face ((,class (:inherit neo-file-link-face))))
     `(neo-vc-added-face ((,class (:foreground ,green))))
     `(neo-vc-edited-face ((,class (:foreground ,aqua))))
     `(neo-vc-ignored-face ((,class (:foreground ,base-dim))))
     `(neo-vc-user-face ((,class (:foreground ,yellow))))
     `(neo-vc-unregistered-face ((,class (:foreground ,green))))
     `(neo-vc-removed-face ((,class (:foreground ,red))))
     `(neo-root-dir-face ((,class (:foreground ,func :inherit bold :height 1.0 :background ,bg11 :box (:line-width 5 :color ,bg11)))))

;;;;; org
     `(org-agenda-clocking ((,class (:background ,green-bg-s :inherit bold :foreground ,comp))))
     `(org-agenda-date ((,class (:foreground ,keyword :height 1.1))))
     `(org-agenda-date-today ((,class (:foreground ,keyword :inherit bold :height 1.3))))
     `(org-agenda-date-weekend ((,class (:inherit bold :foreground ,comp))))
     `(org-agenda-done ((,class (:foreground ,comp))))
     `(org-agenda-dimmed-todo-face ((,class (:foreground ,base-dim))))
     `(org-agenda-structure ((,class (:height 1.2 :foreground ,primary :inherit bold))))
     `(org-block ((,class (:background ,cblk-bg :foreground ,cblk))))
     `(org-block-begin-line ((,class (:background ,cblk-ln-bg :foreground ,cblk-ln))))
     `(org-block-end-line ((,class (:background ,cblk-ln-bg :foreground ,cblk-ln))))
     `(org-clock-overlay ((,class (:background ,highlight))))
     `(org-code ((,class (:foreground ,cyan))))
     `(org-column ((,class (:background ,highlight))))
     `(org-column-title ((,class (:background ,highlight))))
     `(org-date ((,class (:underline t :foreground ,var))))
     `(org-date-selected ((,class (:background ,func :foreground ,bg1))))
     `(org-document-info-keyword ((,class (:foreground ,meta))))
     `(org-document-title ((,class (:foreground ,func :inherit bold :height 1.4 :underline t))))
     `(org-done ((,class (:foreground ,comp :inherit bold :background ,green-bg))))
     `(org-ellipsis ((,class (:foreground ,keyword))))
     `(org-footnote  ((,class (:underline t :foreground ,base))))
     `(org-hide ((,class (:foreground ,base))))
     `(org-kbd ((,class (:inherit region :foreground ,base :box (:line-width 1 :style released-button)))))
     `(org-headline-done ((,class (:foreground ,head-done))))
     `(org-latex-and-related ((,class (:foreground ,comp))))
     `(org-level-1 ((,class (:foreground ,head1))))
     `(org-level-2 ((,class (:foreground ,head2))))
     `(org-level-3 ((,class (:foreground ,head3))))
     `(org-level-4 ((,class (:foreground ,head4))))
     `(org-level-5 ((,class (:foreground ,head1))))
     `(org-level-6 ((,class (:foreground ,head2))))
     `(org-level-7 ((,class (:foreground ,head3))))
     `(org-level-8 ((,class (:foreground ,head4))))
     ;; `(org-heading-text-level-1 ((,class (:inherit bold :foreground ,head1 :height 1.3 :background ,head1-bg))))
     ;; `(org-heading-text-level-2 ((,class (:inherit bold :foreground ,head2 :height 1.2 :background ,head1-bg))))
     ;; `(org-heading-text-level-3 ((,class (:foreground ,head3 :height 1.1 :background ,head1-bg))))
     ;; `(org-heading-text-level-4 ((,class (:foreground ,head4 :background ,head1-bg))))
     ;; `(org-heading-text-level-5 ((,class (:foreground ,head1))))
     ;; `(org-heading-text-level-6 ((,class (:foreground ,head2))))
     ;; `(org-heading-text-level-7 ((,class (:foreground ,head3))))
     ;; `(org-heading-text-level-8 ((,class (:foreground ,head4))))
     `(org-heading-text-level-1 ((,class (:inherit bold :foreground ,base :height 1.3 :background ,head1-bg))))
     `(org-heading-text-level-2 ((,class (:inherit bold :foreground ,base :height 1.2 :background ,head2-bg))))
     `(org-heading-text-level-3 ((,class (:inherit bold :foreground ,base :height 1.1 :background ,head3-bg))))
     `(org-heading-text-level-4 ((,class (:inherit bold :foreground ,base :background ,head4-bg))))
     `(org-heading-text-level-5 ((,class (:inherit bold :foreground ,base))))
     `(org-heading-text-level-6 ((,class (:inherit bold :foreground ,base))))
     `(org-heading-text-level-7 ((,class (:inherit bold :foreground ,base))))
     `(org-heading-text-level-8 ((,class (:inherit bold :foreground ,base))))
     `(org-link ((,class (:underline t :foreground ,comment))))
     `(org-meta-line ((,class (:foreground ,meta))))
     `(org-mode-line-clock-overrun ((,class (:foreground ,err))))
     `(org-priority ((,class (:foreground ,base))))
     `(org-priority-1 ((,class (:foreground ,emacs :inherit bold))))
     `(org-priority-2 ((,class (:foreground ,blue :inherit bold))))
     `(org-priority-3 ((,class (:foreground ,green :inherit bold))))
     `(org-quote ((,class (:inherit org-block :slant italic))))
     `(org-scheduled ((,class (:foreground ,var))))
     `(org-scheduled-today ((,class (:foreground ,func))))
     `(org-scheduled-previously ((,class (:foreground ,base :slant italic))))
     `(org-sexp-date ((,class (:foreground ,base))))
     `(org-special-keyword ((,class (:foreground ,func))))
     `(org-table ((,class (:foreground ,base :background ,head1-bg))))
     `(org-tag ((,class (:foreground ,meta))))
     `(org-time-grid ((,class (:foreground ,primary-2))))
     `(org-todo ((,class (:foreground ,blue :inherit bold :background ,blue-bg))))
     `(org-upcoming-deadline ((,class (:foreground ,base :inherit org-priority))))
     `(org-upcoming-distant-deadline ((,class (:foreground ,comp :inherit org-priority))))
     `(org-verbatim ((,class (:foreground ,keyword))))
     `(org-verse ((,class (:inherit org-block :slant italic))))
     `(org-warning ((,class (:foreground ,war :inherit org-priority))))
     `(org-life-agenda-secondary-face ((,class (:foreground ,base-dim))))
     `(org-life-agenda-session-face-1 ((,class (:background ,blue-bg))))
     `(org-life-agenda-session-face-2 ((,class (:background ,green-bg-s))))
     `(org-life-agenda-empty-progress-face ((,class (:inherit bold :foreground ,bg14))))
     `(org-life-agenda-stress-best-face ((,class (:inherit bold :foreground ,war))))
     `(org-life-agenda-stress-normal-face ((,class (:inherit bold :foreground ,func))))
     `(org-life-agenda-stress-warning-face ((,class (:inherit bold :foreground ,comp))))
     `(org-life-agenda-usable-time-face ((,class (:inherit bold :foreground ,primary-2))))
     `(org-life-agenda-actual-usable-time-face ((,class (:inherit bold :foreground ,comp))))

;;;;; org-catalyst
     `(org-catalyst-fun-item-face ((,class (:foreground ,suc))))
     `(org-catalyst-negative-item-face ((,class (:foreground ,err))))
     `(org-catalyst-task-item-face ((,class (:foreground ,blue))))
     `(org-catalyst-priority-1-face ((,class (:foreground ,emacs))))
     `(org-catalyst-priority-2-face ((,class (:foreground ,blue))))
     `(org-catalyst-priority-3-face ((,class (:foreground ,green))))
     `(org-catalyst-priority-4-face ((,class (:foreground ,base))))
     `(org-catalyst-level-1-face ((,class (:foreground ,head1))))
     `(org-catalyst-level-2-face ((,class (:foreground ,head2))))
     `(org-catalyst-level-3-face ((,class (:foreground ,head3))))
     `(org-catalyst-level-4-face ((,class (:foreground ,head4))))
     `(org-catalyst-level-5-face ((,class (:foreground ,emacs))))
     `(org-catalyst-level-6-face ((,class (:foreground ,aqua))))
     `(org-catalyst-level-7-face ((,class (:foreground ,magenta))))
     `(org-catalyst-level-8-face ((,class (:foreground ,yellow))))

;;;;; perspective
     `(persp-selected-face ((,class (:inherit bold :foreground ,func))))

;;;;; popup
     `(popup-enu-selection-face ((,class (:background ,ttip-sl :foreground ,base))))
     `(popup-face ((,class (:background ,ttip-bg :foreground ,ttip))))
     `(popup-isearch-match ((,class (:inherit match))))
     `(popup-menu-face ((,class (:background ,ttip-bg :foreground ,base))))
     `(popup-menu-mouse-face ((,class (:inherit highlight))))
     `(popup-scroll-bar-background-face ((,class (:background ,bg2))))
     `(popup-scroll-bar-foreground-face ((,class (:background ,act2))))
     `(popup-tip-face ((,class (:background ,ttip-sl :foreground ,base :italic nil :underline nil))))

;;;;; powerline
     `(powerline-active1 ((,class (:background ,mode-line-2-bg :foreground ,mode-line-2-fg))))
     `(powerline-active2 ((,class (:background ,mode-line-bg :foreground ,mode-line-fg))))
     `(powerline-inactive1 ((,class (:background ,mode-line-2-bg-inactive :foreground ,mode-line-2-fg-inactive))))
     `(powerline-inactive2 ((,class (:background ,mode-line-bg-inactive :foreground ,mode-line-fg-inactive))))

;;;;; rainbow-delimiters
     ;; `(rainbow-delimiters-depth-1-face ((,class :foreground ,keyword)))
     ;; `(rainbow-delimiters-depth-2-face ((,class :foreground ,green)))
     ;; `(rainbow-delimiters-depth-3-face ((,class :foreground ,func)))
     ;; `(rainbow-delimiters-depth-4-face ((,class :foreground ,emacs)))
     ;; `(rainbow-delimiters-depth-5-face ((,class :foreground ,comment)))
     ;; `(rainbow-delimiters-depth-6-face ((,class :foreground ,keyword)))
     ;; `(rainbow-delimiters-depth-7-face ((,class :foreground ,green)))
     ;; `(rainbow-delimiters-depth-8-face ((,class :foreground ,func)))
     `(rainbow-delimiters-depth-1-face ((,class :foreground ,blue)))
     `(rainbow-delimiters-depth-2-face ((,class :foreground ,magenta)))
     `(rainbow-delimiters-depth-3-face ((,class :foreground ,cyan)))
     `(rainbow-delimiters-depth-4-face ((,class :foreground ,yellow)))
     `(rainbow-delimiters-depth-5-face ((,class :foreground ,green)))
     `(rainbow-delimiters-depth-6-face ((,class :foreground ,blue)))
     `(rainbow-delimiters-depth-7-face ((,class :foreground ,magenta)))
     `(rainbow-delimiters-depth-8-face ((,class :foreground ,cyan)))
     `(rainbow-delimiters-mismatched-face ((,class :foreground ,err)))
     `(rainbow-delimiters-unmatched-face ((,class :foreground ,err)))

;;;;; rcirc
     `(rcirc-bright-nick ((,class (:background ,aqua-bg :foreground ,cyan))))
     `(rcirc-dim-nick ((,class (:foreground ,base-dim))))
     `(rcirc-keyword ((,class (:background ,green-bg-s :foreground ,green))))
     `(rcirc-timestamp ((,class (:foreground ,keyword))))
     `(rcirc-track-keyword ((,class (:background ,green :foreground ,bg1))))
     `(rcirc-url ((,class (:inherit link))))

;;;;; shm
     `(shm-current-face ((,class (:background ,green-bg-s))))
     `(shm-quarantine-face ((,class (:background ,red-bg-s))))

;;;;; show-paren
     `(show-paren-match ((,class (:foreground ,mat :inherit bold  :underline t))))
     `(show-paren-match-expression ((,class (:background ,bg12))))
     `(show-paren-mismatch ((,class (:foreground ,err :inherit bold :underline t))))

;;;;; smartparens
     `(sp-pair-overlay-face ((,class (:background ,blue-bg-s3))))
     ;; `(sp-show-pair-match-face ((,class (:foreground ,green :background ,green-bg :bold t :underline t))))
     `(sp-show-pair-match-face ((,class (:background ,blue-bg-s4 :inherit bold))))
     `(sp-show-pair-match-content-face ((,class (:background ,blue-bg-s3))))

;;;;; smerge
     `(smerge-base ((,class (:background ,yellow-bg))))
     `(smerge-markers ((,class (:background ,ttip-bg :foreground ,ttip))))
     `(smerge-mine ((,class (:background ,red-bg))))
     `(smerge-other ((,class (:background ,green-bg))))
     `(smerge-refined-added ((,class (:background ,green-bg-s :foreground ,green))))
     `(smerge-refined-changed ((,class (:background ,blue-bg-s :foreground ,blue))))
     `(smerge-refined-removed ((,class (:background ,red-bg-s :foreground ,red))))

;;;;; spaceline
     `(spaceline-highlight-face  ((,class (:foreground ,on-primary :background ,primary))))
     `(spaceline-flycheck-error  ((,class (:foreground ,err))))
     `(spaceline-flycheck-info   ((,class (:foreground ,keyword))))
     `(spaceline-flycheck-warning((,class (:foreground ,war))))
     `(spaceline-python-venv ((,class (:foreground ,comp))))

;;;;; swiper
     `(swiper-line-face ((,class (:background ,highlight))))
     `(swiper-match-face-1 ((,class (:inherit bold))))
     `(swiper-match-face-2 ((,class (:inverse-video t))))
     `(swiper-match-face-3 ((,class (:foreground ,head4 :background ,blue-bg-s :underline t))))
     `(swiper-match-face-4 ((,class (:foreground ,head3 :background ,blue-bg-s :underline t))))

;;;;; tabbar
     `(tabbar-button ((,class (:inherit tabbar-default ))))
     `(tabbar-button-highlight ((,class (:inherit tabbar-default))))
     `(tabbar-default ((,class (:background ,bg1 :foreground ,head1 :height 0.9))))
     `(tabbar-highlight ((,class (:underline t))))
     `(tabbar-selected ((,class (:inherit tabbar-default :foreground ,func :weight bold))))
     `(tabbar-separator ((,class (:inherit tabbar-default))))
     `(tabbar-unselected ((,class (:inherit tabbar-default :background ,bg1 :slant italic :weight light))))

;;;;; term
     `(term ((,class (:foreground ,base :background ,back-border2))))
     `(term-color-black ((,class (:foreground ,bg4))))
     `(term-color-blue ((,class (:foreground ,keyword))))
     `(term-color-cyan ((,class (:foreground ,cyan))))
     `(term-color-green ((,class (:foreground ,green))))
     `(term-color-magenta ((,class (:foreground ,magenta))))
     `(term-color-red ((,class (:foreground ,red))))
     `(term-color-white ((,class (:foreground ,base))))
     `(term-color-yellow ((,class (:foreground ,yellow))))

;;;;; tide
     `(tide-hl-identifier-face ((,class (:inherit ahs-face))))

;;;;; treemacs
     `(treemacs-git-added-face ((,class (:foreground ,green :background ,green-bg))))
     `(treemacs-git-conflict-face ((,class (:foreground ,red :background ,red-bg))))
     `(treemacs-git-ignored-face ((,class (:foreground ,yellow))))
     `(treemacs-git-modified-face ((,class (:foreground ,blue :background ,blue-bg))))
     `(treemacs-git-untracked-face ((,class (:foreground ,aqua :background ,aqua-bg))))

;;;;; visual indentation
     `(visual-indentation-dark-face ((,class (:background ,bg12))))
     `(visual-indentation-light-face ((,class (:background ,bg11))))

;;;;; volatile-highlight
     `(vhl/default-face ((,class (:background ,bg13))))

;;;;; web-mode
     `(web-mode-builtin-face ((,class (:inherit ,font-lock-builtin-face))))
     `(web-mode-comment-face ((,class (:inherit ,font-lock-comment-face))))
     `(web-mode-constant-face ((,class (:inherit ,font-lock-constant-face))))
     `(web-mode-doctype-face ((,class (:inherit ,font-lock-comment-face))))
     `(web-mode-function-name-face ((,class (:inherit ,font-lock-function-name-face))))
     `(web-mode-html-attr-name-face ((,class (:foreground ,keyword))))
     `(web-mode-html-attr-value-face ((,class (:foreground ,str))))
     `(web-mode-html-tag-face ((,class (:foreground ,type))))
     `(web-mode-keyword-face ((,class (:foreground ,keyword))))
     `(web-mode-string-face ((,class (:foreground ,str))))
     `(web-mode-symbol-face ((,class (:foreground ,type))))
     `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
     `(web-mode-warning-face ((,class (:inherit ,font-lock-warning-face))))

;;;;; which-key
     `(which-key-command-description-face ((,class (:foreground ,base))))
     `(which-key-group-description-face ((,class (:foreground ,keyword))))
     `(which-key-key-face ((,class (:foreground ,func :inherit bold))))
     `(which-key-separator-face ((,class (:background nil :foreground ,str))))
     `(which-key-special-key-face ((,class (:background ,func :foreground ,bg1))))

;;;;; which-function-mode
     `(which-func ((,class (:foreground ,base))))

;;;;; whitespace-mode
     `(whitespace-empty ((,class (:background nil :foreground ,yellow))))
     `(whitespace-indentation ((,class (:background nil :foreground ,war))))
     `(whitespace-line ((,class (:background nil :foreground ,comp))))
     `(whitespace-newline ((,class (:background nil :foreground ,comp))))
     `(whitespace-space ((,class (:background nil :foreground ,act2))))
     `(whitespace-space-after-tab ((,class (:background nil :foreground ,yellow))))
     `(whitespace-space-before-tab ((,class (:background nil :foreground ,yellow))))
     ;; `(whitespace-tab ((,class (:background nil :foreground ,act2))))
     `(whitespace-tab ((,class (:foreground ,bg14)))) ; indentation guide
     `(whitespace-trailing ((,class (:background ,err :foreground ,war))))

;;;;; window-divider
     ;; `(window-divider ((,class (:background ,back-border :foreground ,back-border))))
     `(window-divider ((,class (:background ,border-dim :foreground ,border-dim))))
     `(window-divider-first-pixel ((,class (:background ,back-border :foreground ,back-border))))
     `(window-divider-last-pixel ((,class (:background ,back-border :foreground ,back-border))))

;;;;; yascroll
     `(yascroll:thumb-fringe ((,class (:background ,secondary-2 :foreground ,secondary-2))))

;;;;; yasnippet
     `(yas-field-highlight-face ((,class (:background ,bg13))))

;;;;; other, need more work
     `(ac-completion-face ((,class (:underline t :foreground ,keyword))))
     `(ffap ((,class (:foreground ,base))))
     `(flx-highlight-face ((,class (:foreground ,comp :underline nil))))
     `(icompletep-determined ((,class :foreground ,keyword)))
     `(js2-external-variable ((,class (:foreground ,comp))))
     `(js2-function-param ((,class (:foreground ,const))))
     `(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
     `(js2-jsdoc-html-tag-name ((,class (:foreground ,keyword))))
     `(js2-jsdoc-value ((,class (:foreground ,str))))
     `(js2-private-function-call ((,class (:foreground ,const))))
     `(js2-private-member ((,class (:foreground ,base))))
     `(js3-error-face ((,class (:underline ,war))))
     `(js3-external-variable-face ((,class (:foreground ,var))))
     `(js3-function-param-face ((,class (:foreground ,keyword))))
     `(js3-instance-member-face ((,class (:foreground ,const))))
     `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
     `(js3-warning-face ((,class (:underline ,keyword))))
     `(slime-repl-inputed-output-face ((,class (:foreground ,comp))))
     `(trailing-whitespace ((,class :foreground nil :background ,err)))
     `(undo-tree-visualizer-current-face ((,class :foreground ,keyword)))
     `(undo-tree-visualizer-default-face ((,class :foreground ,base)))
     `(undo-tree-visualizer-register-face ((,class :foreground ,comp)))
     `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
     )

    (custom-theme-set-variables
     name
     `(ansi-color-names-vector [,bg4 ,red ,green ,yellow ,blue ,magenta ,cyan ,base])
     )
    )
  )

(provide 'infinity-theme-common)
